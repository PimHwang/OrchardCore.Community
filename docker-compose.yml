version: '3'

services:

  traefik:
    image: "traefik:v2.0"
    container_name: "traefik"
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"      
      - "--certificatesresolvers.myresolver.acme.email=postmaster@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    ports:
      - "80:80"
      - "443:443"
      #- "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./src/OrchardCore.Community/App_Data:/letsencrypt"

  registry:
    image: "registry:2"
    container_name: "registry"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.registry.loadbalancer.server.port=5000"
      - "traefik.http.routers.registry.rule=Host(`registry.docker.internal`)"
      - "traefik.http.routers.registry.entrypoints=web"
      - "traefik.http.routers.registry.service=registry"

  drone:
    image: "drone/drone:2"
    container_name: "drone"
    environment:
      - DRONE_GITHUB_CLIENT_ID={{DRONE_GITHUB_CLIENT_ID}}
      - DRONE_GITHUB_CLIENT_SECRET={{DRONE_GITHUB_CLIENT_SECRET}}
      - DRONE_RPC_SECRET={{DRONE_RPC_SECRET}}
      - DRONE_SERVER_HOST=drone.docker.internal
      - DRONE_SERVER_PROTO=http
    volumes:
      - "./src/OrchardCore.Community/App_Data:/data"    
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.drone.loadbalancer.server.port=80"
      - "traefik.http.routers.drone.rule=Host(`drone.docker.internal`)"
      - "traefik.http.routers.drone.entrypoints=web"
      - "traefik.http.routers.drone.service=drone"

  drone-runner-docker:
    image: "drone/drone-runner-docker:1"
    container_name: "drone-runner-docker"
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone.docker.internal
      - DRONE_RPC_SECRET={{DRONE_RPC_SECRET}}
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NAME=dronerunner
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"    
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.dronerunner.loadbalancer.server.port=3000"
      - "traefik.http.routers.dronerunner.rule=Host(`dronerunner.docker.internal`)"
      - "traefik.http.routers.dronerunner.entrypoints=web"
      - "traefik.http.routers.dronerunner.service=dronerunner"

  community:
    image: "registry.docker.internal/community"
    container_name: "community"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.community.loadbalancer.server.port=80"
      - "traefik.http.routers.community.rule=Host(`community.docker.internal`)"
      - "traefik.http.routers.community.entrypoints=web"
      - "traefik.http.routers.community.service=community"

#  sqlserver:
#    image: "sqlserver"
#    container_name: "mcr.microsoft.com/mssql/server"
#    environment:
#      - ACCEPT_EULA=Y
#      - SA_PASSWORD=p@ssword
#      - MSSQL_PID=Express
#    ports:
#      - "1433:1433"
#    volumes:      
#      - "./src/OrchardCore.Community/App_Data:/var/opt/mssql/data"
#      - "./src/OrchardCore.Community/App_Data/Sites:/data"
#    #networks:
#    #  - community

#networks:
#  community:    
#    driver: bridge